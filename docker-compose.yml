services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data
      POSTGRES_DB: springboot_db
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - notification
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "username" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s



  mailhog:
    image: mailhog/mailhog
    container_name: 'mailhog'
    ports:
      - "1025:1025"
      - "8025:8025"



  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    restart: always
    ports:
      - "81:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - notification

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.2
    ports:
      - 9090:8080
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://localhost:5432/springboot_db
      KC_DB_USERNAME: username
      KC_DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - "start-dev"
    volumes:
      - keycloak_data:/opt/keycloak/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - notification

    # Zookeeper Service for Kafka
  zookeeper:
      image: confluentinc/cp-zookeeper:7.3.0
      container_name: zookeeper
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      ports:
        - "2181:2181"
      networks:
        - batch-kafka-network

    # Kafka Service
  kafka:
      image: confluentinc/cp-kafka:7.3.0
      container_name: kafka
      depends_on:
        - zookeeper
      ports:
        - "9092:9092"
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      networks:
        - batch-kafka-network
volumes:
  postgres:
    driver: local
  pgadmin_data:
  keycloak_data:
    driver: local

networks:
  notification:
    driver: bridge
  batch-kafka-network:
    driver: bridge

